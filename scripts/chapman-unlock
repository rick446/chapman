#!/usr/bin/env python
"""Usage:
        chapman-unlock <config> [options]

Recover jobs that are 'busy' on dead workers

Options:
  -h --help                 show this help message and exit
"""

import time
import logging
from datetime import datetime, timedelta

from docopt import docopt
from pyramid.paster import bootstrap, setup_logging

log = None


def main(args):
    from chapman import model as M
    chan = M.Message.channel.new_channel()
    workers = get_live_workers(chan)
    workers.append(M.Message.missing_worker)
    q = M.Message.m.find(
        {'s.status': {'$in': ['busy', 'acquire']},
         's.w': {'$nin': workers}})
    for msg in q:
        log.info('Unlock message %s', msg)
        msg.unlock()


def get_live_workers(chan):
    workers = []
    start = datetime.utcnow()
    last_pong = [start]
    last_interval = [timedelta(seconds=10)]

    @chan.sub('pong')
    def save_pongs(chan, msg):
        worker = msg['data']['worker']
        workers.append(worker)
        last_pong[0] = datetime.utcnow()
        last_interval[0] = max(last_interval[0], last_pong[0] - start)
        log.info('... %s', worker)
    log.info('Sending ping...')
    chan.pub('ping', {'ts_ping': datetime.utcnow(),
                      'worker': '*'})
    while datetime.utcnow() - last_pong[0] <= last_interval[0]:
        time.sleep(0.1)
        chan.handle_ready(raise_errors=True, await=True)
    log.info('Waited long enough, unlocking messages now....')
    return workers

if __name__ == '__main__':
    args = docopt(__doc__)
    setup_logging(args['<config>'])
    log = logging.getLogger('chapman-unlock')
    bootstrap(args['<config>'], options=dict(noweb='true'))
    main(args)
